// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

model Tenant {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  plan            String    @default("free")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  companies       Company[]
  users           UsersOnTenants[]
}

model Company {
  id              String    @id @default(cuid())
  name            String
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  users           UsersOnCompanies[]
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   UserRole  @default(USER)
  isTwoFactorEnabled     Boolean   @default(false)
  twoFactorConfirmation  TwoFactorConfirmation?
  accounts               Account[]
  tenants                UsersOnTenants[]
  companies              UsersOnCompanies[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model UsersOnTenants {
  userId        String
  tenantId      String
  role          UserRole  @default(USER)
  assignedAt    DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
}

model UsersOnCompanies {
  userId        String
  companyId     String
  role          UserRole  @default(USER)
  assignedAt    DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String      @id   @default(cuid())
  email   String
  token   String      @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String      @id   @default(cuid())
  email   String
  token   String      @unique
  expires DateTime
  
  @@unique([email, token])
}

model TwoFactorToken {
  id      String      @id   @default(cuid())
  email   String
  token   String      @unique
  expires DateTime
  
  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String      @id   @default(cuid())
  userId  String      @unique
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}